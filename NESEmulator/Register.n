using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NESEmulator {

	public interface IRegister[T] {
		GetValue() : T;
		SetValue(data:T) : void;
	}
	public class Register : IRegister[byte] {
		mutable reg : byte = 0x0;

		public GetValue() : byte{ reg }
		public SetValue(data : byte) : void {reg = data}

	}
	public class ProcessorStatus : IRegister[byte] {
		[Flags]
		public enum StatusRegister {
			| Carry = 0x1
			| Zero = 0x2
			| Interrupt = 0x4
			| Decimal = 0x8
			| Break = 0x10
			| Reserved = 0x20//always true
			| Overflow = 0x40
			| Negative = 0x80
		};
		[FlagAccessor (Carry,Zero,Interrupt,Decimal,Break,Reserved,Overflow,Negative,flags=WantSetter)]
		mutable reg : StatusRegister;

		public GetValue() : byte { reg :> byte }
		public SetValue(data : byte) : void { reg = data :> StatusRegister }
	}
	//$2000
	public class PPUControlRegister1 : IRegister[byte] {
		[Flags]
		public enum StatusRegister {
			| NameTableAddressL = 0x1//0:$2000 1:$2400 2:$2800 3:$3200
			| NameTableAddressH = 0x2

			| PPUAddressIncrement = 0x4//0 +=1 1 += 32
			| SpritePatternTableAddress = 0x8//0:$0000 1:$1000
			| BGPatternTableAddress = 0x10//0:$0000 1:$1000
			| SpriteSize = 0x20//0:8x8 1:8x16
			| PPUMasterSlave = 0x40//always 1
			| NMIOnVBlank = 0x80//1:enable interrupt
		};
		[FlagAccessor (
			NameTableAddressL,NameTableAddressH,PPUAddressIncrement,SpritePatternTableAddress,
			BGPatternTableAddress,SpriteSize,PPUMasterSlave,NMIOnVBlank,
		flags=WantSetter)]
		mutable reg : StatusRegister;

		public GetValue() : byte { reg :> byte }
		public SetValue(data : byte) : void { reg = data :> StatusRegister }
	}
	//$2001
	public class PPUControlRegister2 : IRegister[byte] {
		[Flags]
		public enum StatusRegister {
			| DisplayType = 0x1//0:color 1:mono
			| BGMask = 0x2//0:左8ピクセルを書かない 1:書く
			| SpriteMask = 0x4//
			| BGEnable = 0x8
			| SpriteEnable = 0x10
			| BGColorG = 0x20//000 is black
			| BGColorB = 0x40
			| BGColorR = 0x80
		};
		[FlagAccessor (
			DisplayType,BGMask,SpriteMask,BGEnable,
			SpriteEnable,BGColorG,BGColorB,BGColorR,
		flags=WantSetter)]
		mutable reg : StatusRegister;

		public GetValue() : byte { reg :> byte }
		public SetValue(data : byte) : void { reg = data :> StatusRegister }
	}
	//$2002
	public class PPUStatusRegister : IRegister[byte] {
		[Flags]
		public enum StatusRegister {
			| NC0 = 0x1
			| NC1 = 0x2
			| NC2 = 0x4
			| NC3 = 0x8
			| NC4 = 0x10
			| ScanLineSprite = 0x20//0:<8 1:>9
			| SpriteHit = 0x40//hit is 1
			| VBlankFlag = 0x80//VBlank is enable
		};
		[FlagAccessor (
			NC0,NC1,NC2,NC3,
			NC4,ScanLineSprite,SpriteHit,VBlankFlag,
		flags=WantSetter)]
		mutable reg : StatusRegister;

		public GetValue() : byte { reg :> byte }
		public SetValue(data : byte) : void { reg = data :> StatusRegister }
	}

	public class APUControl : IRegister[ushort] {
		[Flags]
		public enum StatusRegister {
			| WRITE_SQUARE_1_CONTROL_1 = 0x1
			| WRITE_SQUARE_1_CONTROL_2 = 0x2
			| WRITE_SQUARE_1_TIMER_1 = 0x4
			| WRITE_SQUARE_1_TIMER_2 = 0x8

			| WRITE_SQUARE_2_CONTROL_1 = 0x10
			| WRITE_SQUARE_2_CONTROL_2 = 0x20
			| WRITE_SQUARE_2_TIMER_1 = 0x40
			| WRITE_SQUARE_2_TIMER_2 = 0x80

			| WRITE_TRIANGLE_CONTROL_1 = 0x100
			| WRITE_TRIANGLE_CONTROL_2 = 0x200
			| WRITE_TRIANGLE_TIMER_1 = 0x400
			| WRITE_TRIANGLE_TIMER_2 = 0x800

			| WRITE_NOISE_CONTROL_1 = 0x1000
			| WRITE_NOISE_CONTROL_2 = 0x2000
			| WRITE_NOISE_TIMER_1 = 0x4000
			| WRITE_NOISE_TIMER_2 = 0x8000

			| PCM_CONTROL = 0x10000
			| PCM_VOLUME = 0x20000
			| PCM_ADDR = 0x40000
			| PCM_LENGTH = 0x80000

			| SPRITE_DMA = 0x100000
			| SOUND_CONTROL = 0x200000

			| SPECIO_1 = 0x400000
			| SPECIO_2 = 0x800000
		};
		[FlagAccessor (
			WRITE_SQUARE_1_CONTROL_1, WRITE_SQUARE_1_CONTROL_2, WRITE_SQUARE_1_TIMER_1, WRITE_SQUARE_1_TIMER_2,
			WRITE_SQUARE_2_CONTROL_1, WRITE_SQUARE_2_CONTROL_2, WRITE_SQUARE_2_TIMER_1, WRITE_SQUARE_2_TIMER_2,
			WRITE_TRIANGLE_CONTROL_1, WRITE_TRIANGLE_CONTROL_2, WRITE_TRIANGLE_TIMER_1, WRITE_TRIANGLE_TIMER_2,
			WRITE_NOISE_CONTROL_1, WRITE_NOISE_CONTROL_2, WRITE_NOISE_TIMER_1, WRITE_NOISE_TIMER_2,
			PCM_CONTROL, PCM_VOLUME, PCM_ADDR, PCM_LENGTH,
			SPRITE_DMA, SOUND_CONTROL,
			SPECIO_1, SPECIO_2,
		flags=WantSetter)]
		mutable reg : StatusRegister;

		public GetValue() : ushort{ reg :> ushort }
		public SetValue(data : ushort) : void { reg = data :> StatusRegister }

	}

}
