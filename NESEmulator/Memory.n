using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NESEmulatorMacro;

namespace NESEmulator {
/// <summary>
/// Description of Memory.
/// </summary>
	public class Memory {
	//ram/rom size
		public static WRAM_SIZE = 0x0800;
		public static PPU_IO_SIZE = 0x0008;
		public static APU_PAD_IO_SIZE = 0x0020;
		public static EXTEND_ROM_SIZE = 0x1fe0;
		public static EXTEND_RAM_SIZE = 0x2000;
		public static PRG_ROM_SIZE = 0x4000;
	//end addr
		public static WRAM_ADDR = 0x0800;
		public static WRAM_MIRROR_ADDR = 0x2000;
		public static PPU_IO_ADDR = 0x2008;
		public static PPU_IO_MIRROR = 0x4000;
		public static APU_PAD_IO_ADDR = 0x4020;
		public static EXTEND_ROM_ADDR = 0x6000;
		public static EXTEND_RAM_ADDR = 0x8000;
		public static PRG_ROM1_ADDR = 0xC000;
		public static PRG_ROM2_ADDR = 0x10000;
	//ppu control register($2000 ~ $2007)
		public enum PPU_CONTROL : int {
			| CONTROL1
			| CONTROL2
			| STATUS
			| SPRITE_ADDR
			| SPRITE_IO
			| BG_SCROLL
			| MEMORY_ADDR
			| IO_REGISTER
		};
	//apu control register($4000 ~ $4017)
		public enum APU_CONTROL : int {
			| WRITE_SQUARE_1_CONTROL_1
			| WRITE_SQUARE_1_CONTROL_2
			| WRITE_SQUARE_1_TIMER_1
			| WRITE_SQUARE_1_TIMER_2

			| WRITE_SQUARE_2_CONTROL_1
			| WRITE_SQUARE_2_CONTROL_2
			| WRITE_SQUARE_2_TIMER_1
			| WRITE_SQUARE_2_TIMER_2

			| WRITE_TRIANGLE_CONTROL_1
			| WRITE_TRIANGLE_CONTROL_2
			| WRITE_TRIANGLE_TIMER_1
			| WRITE_TRIANGLE_TIMER_2

			| WRITE_NOISE_CONTROL_1
			| WRITE_NOISE_CONTROL_2
			| WRITE_NOISE_TIMER_1
			| WRITE_NOISE_TIMER_2

			| PCM_CONTROL
			| PCM_VOLUME
			| PCM_ADDR
			| PCM_LENGTH

			| SPRITE_DMA
			| SOUND_CONTROL

			| SPECIO_1
			| SPECIO_2
		};

		private wram  : array[byte] = array(WRAM_SIZE);
		private ppuio : array[byte] = array(PPU_IO_SIZE);
		private apuio : array[byte] = array(APU_PAD_IO_SIZE);
	//exrom
		private exram  : array[byte] = array(EXTEND_RAM_SIZE);
		private rom1   : array[byte] = array(PRG_ROM_SIZE);
		private rom2   : array[byte] = array(PRG_ROM_SIZE);
	//TODO:
	//VRAM
	//SPRITE_RAM
	//
		public Reset() : void {
			Array.Clear(wram,0,wram.Length);
			Array.Clear(ppuio,0,ppuio.Length);
			Array.Clear(apuio,0,apuio.Length);
			Array.Clear(exram,0,exram.Length);
			Array.Clear(rom1,0,rom1.Length);
			Array.Clear(rom2,0,rom2.Length);
		}
		public Item[addr : int] : byte {
			get { Read(addr) }
			set { Write(addr, value) }
		}

		public Read(addr:int) : byte {
			| _ when addr < WRAM_MIRROR_ADDR => wram[addr % WRAM_SIZE];
			| _ when addr < PPU_IO_MIRROR => match(((addr - WRAM_MIRROR_ADDR) % PPU_IO_SIZE) :> PPU_CONTROL) {
						| _ => ppuio[(addr - WRAM_MIRROR_ADDR)  % PPU_IO_SIZE];
					}
			| _ when addr < APU_PAD_IO_ADDR => match((addr - PPU_IO_MIRROR) :> APU_CONTROL) {
						| _ => 0x40;
					}
			| _ when addr < EXTEND_ROM_ADDR => 0//EXROMは未実装
			| _ when addr < EXTEND_RAM_ADDR => exram[addr - EXTEND_ROM_ADDR];
			| _ when addr < PRG_ROM1_ADDR => rom1[addr - EXTEND_RAM_ADDR];
			| _ => rom2[addr - PRG_ROM1_ADDR];
		}
		public Write(addr:int,data:byte) : void {
			| _ when addr < WRAM_MIRROR_ADDR => wram[addr % WRAM_SIZE] = data;
			| _ when addr < PPU_IO_MIRROR => match(((addr - WRAM_MIRROR_ADDR) % PPU_IO_SIZE) :> PPU_CONTROL) {
						| _ => ppuio[(addr - WRAM_MIRROR_ADDR)  % PPU_IO_SIZE] = data;
					}
			| _ when addr < APU_PAD_IO_ADDR => match((addr - PPU_IO_MIRROR) :> APU_CONTROL) {
						| SPRITE_DMA => {
						//TODO:Copy RAM -> SPRITE_RAM
								()
							}
						| _ => ();
					}
			| _ when addr < EXTEND_ROM_ADDR => ()//ROM
			| _ when addr < EXTEND_RAM_ADDR => exram[addr - EXTEND_ROM_ADDR] = data;
			| _ when addr < PRG_ROM1_ADDR => ();
			| _ => ();//rom2
		}
	}
}
