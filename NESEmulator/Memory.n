using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NESEmulatorMacro;

namespace NESEmulator {
/// <summary>
/// Description of Memory.
/// </summary>
	public class Memory {
	//ram/rom size
		public static WRAM_SIZE : ushort = 0x0800;
		public static PPU_IO_SIZE : ushort = 0x0008;
		public static APU_PAD_IO_SIZE : ushort = 0x0020;
		public static EXTEND_ROM_SIZE : ushort = 0x1fe0;
		public static EXTEND_RAM_SIZE : ushort = 0x2000;
		public static PRG_ROM_SIZE : ushort = 0x4000;
	//end addr
		public static WRAM_ADDR : ushort = 0x0800;
		public static WRAM_MIRROR_ADDR : ushort = 0x2000;
		public static PPU_IO_ADDR : ushort = 0x2008;
		public static PPU_IO_MIRROR : ushort = 0x4000;
		public static APU_PAD_IO_ADDR : ushort = 0x4020;
		public static EXTEND_ROM_ADDR : ushort = 0x6000;
		public static EXTEND_RAM_ADDR : ushort = 0x8000;
		public static PRG_ROM1_ADDR : ushort = 0xC000;
		public static PRG_ROM2_ADDR : ulong = 0x10000;
	//interrupt
		public static NMI_VECT_L : ushort = 0xfffa;
		public static NMI_VECT_H : ushort = 0xfffb;
		public static RESET_VECT_L : ushort = 0xfffc;
		public static RESET_VECT_H : ushort = 0xfffd;
		public static IRQ_VECT_L : ushort = 0xfffe;
		public static IRQ_VECT_H : ushort = 0xffff;
		public static BRK_VECT_L : ushort = 0xfffe;
		public static BRK_VECT_H : ushort = 0xffff;
	//ppu control register($2000 ~ $2007)
		private PPUIO : array[IRegister[byte]] = array[
				PPUControlRegister1() ,//TODO:<- { PPUMasterSlave = true },
				PPUControlRegister2(),//R
				PPUStatusRegister(),
				Register(),//SpriteMemoryAddr
				Register(),//SpriteMemoryData
				Register(),//BGScrollOffset
				Register(),//PPUMemoryAddr
				Register(),//PPUMemoryData R/W
			];
		public enum PPUMemoryMap {
			| PPUControlRegister1 = 0x0
			| PPUControlRegister2 = 0x1
			| PPUStatusRegister   = 0x2
			| SpriteMemoryAddress = 0x3
			| SpriteMemoryData    = 0x4
			| BGScrollOffset      = 0x5
			| PPUMemoryAddr       = 0x6
			| PPUMemoryData       = 0x7
		};
		public selectPPURegister(addr:ushort) : IRegister[byte] { PPUIO[addr :> int]; }
		public selectPPURegister(map:PPUMemoryMap) : IRegister[byte]  {	PPUIO[map :> int]; }
	//apu control register($4000 ~ $4017)
		private APIControlRegister : APUControl = APUControl();

		private wram  : array[byte] = array(WRAM_SIZE :> int);
		private apuio : array[byte] = array(APU_PAD_IO_SIZE :> int);
	//exrom
		private exram  : array[byte] = array(EXTEND_RAM_SIZE :> int);
		private rom1   : array[byte] = array(PRG_ROM_SIZE :> int);
		private rom2   : array[byte] = array(PRG_ROM_SIZE :> int);
	//TODO:
	//VRAM
	//SPRITE_RAM
	//
		public Reset() : void {
			Array.Clear(wram,0,wram.Length);
			Array.Clear(apuio,0,apuio.Length);
			Array.Clear(exram,0,exram.Length);
			Array.Clear(rom1,0,rom1.Length);
			Array.Clear(rom2,0,rom2.Length);
		}
		public Item[addr : ushort] : byte {
			get { Read(addr) }
			set { Write(addr, value) }
		}

		public Read(addr:ushort) : byte {
			def addr_i = addr :> int;
			match(addr) {
				| _ when addr < WRAM_MIRROR_ADDR => wram[addr_i % WRAM_SIZE]
				| _ when addr < PPU_IO_MIRROR => selectPPURegister(((addr_i - WRAM_MIRROR_ADDR)  % PPU_IO_SIZE) :> ushort).GetValue()
				| _ when addr < APU_PAD_IO_ADDR => 0x40
				| _ when addr < EXTEND_ROM_ADDR => 0//EXROMは未実装
				| _ when addr < EXTEND_RAM_ADDR => exram[addr_i - EXTEND_ROM_ADDR]
				| _ when addr < PRG_ROM1_ADDR => rom1[addr_i - EXTEND_RAM_ADDR]
				| _ => rom2[addr_i - PRG_ROM1_ADDR]
			}
		}
		public Write(addr:ushort,data:byte) : void {
			def addr_i = addr :> int;
			match(addr) {
				| _ when addr < WRAM_MIRROR_ADDR => wram[addr_i % WRAM_SIZE] = data
				| _ when addr < PPU_IO_MIRROR => selectPPURegister(((addr_i - WRAM_MIRROR_ADDR)  % PPU_IO_SIZE) :> ushort).SetValue(data)
				| _ when addr < APU_PAD_IO_ADDR => match(addr_i - PPU_IO_MIRROR) {
						//TODO:SpriteDMAしような
							| 0 => {
						//TODO:Copy RAM -> SPRITE_RAM
									()
							}
							| _ => ();
						}
				| _ when addr < EXTEND_ROM_ADDR => ()//ROM
				| _ when addr < EXTEND_RAM_ADDR => exram[addr_i - EXTEND_ROM_ADDR] = data
				| _ when addr < PRG_ROM1_ADDR => ()
				| _ => ()//rom2
			}
		}
	}
}
